1.出度：有向图中以该点为起点的次数和
入度：有向图中以该点为终点的次数和
度：入度+出度

2.pagerank中的转移矩阵：
首先，基于网页u的影响力PR(u):所有入链集合的页面加权影响力之和
转移矩阵：统计网页对于其他网页的跳转概率，由于出链会给被链接的页面赋予影响力，
	关键在于统计他们出链的数量
无等级泄露和等级沉默前提下，经过n次迭代后转移矩阵趋向稳定

3.等级泄露（Rank Leak）：一个网页只有入链没有出链，最终导致其他网页PR值为0

等级沉没（Rank Sink）：一个网页只有出链没有入链，最终导致这个网页的PR值为0

4.TextRank算法：基于pagerank把句子构造成图，设置统计窗口，在窗口内共线的单词（节点）间建立边，统计的次数即权重。
textrank4zh句子共线相似度判定：如果两个句子相似，节点间存在一条无向有权边。
相似度=同时出现在两个句子中的单词个数/句子中单词个数求对数之和

5.LPA算法：基于标签传播的非重叠社区发现算法
	节点向其他点传播自己标签，每个点都根据接收到的标签次数选择最多的一个更新自己标签（激活），接着激活点向周围点继续传播标签直到所有点更新后状态不变（非激活），将同标签点分到同一社区，分类结束。
6.Dijkstra:从某一点出发遍历直接关联点，寻找到关联点最短路，再基于关联点出发寻找这些点的直接关联点并更新到初始点的最短距离，最后得到全路线图到出发点的最短路径和距离

7.Floyd：从初始距离矩阵开始逐渐添加中间点更新距离矩阵，最后得到所有点间距离迭代结果


thiking
1.高德路径规划问题：
最短路径选取：花费总时间最短的路径。
	首先通过图论的最短路径算法计算节点（路口）间最短路径、次最短路径（按实际道路情况最多选择出三条路径）和对应的距离，接着根据实时路况进行路段划分（畅通路段、拥挤路段、堵塞路段）并统计各路段路长，
	在不同路段设置对应通过速度，路长/通过速度计算出在各路段分别通过的时间，最后求和得到预计需要花费的时间，选取耗时最少的方案。
进一步解决：行进过程中路况更新，发现更节省时间方案的动态规划问题：可以把更新后未通过路段节点作为新的节点，计算它到临近节点的时间，并结合Floyd算法实时更新行程。

2.LPA球队划分问题：LPA是基于动态的标签传播，实际参赛过程可能涉及一些特殊的友谊赛或联赛赛季末最后的1/8、1/4等跨联盟球队间的比赛，
		在这个过程中LPA算法把这些交手信息也统计成标签传播，因此最后聚类结果只有11个联盟。
3.微博信息流设计（EdgeRank）
（1）信息筛选，选出有质量的内容推荐，包括原创性，被转发量，被评论量
（2）权重设置：粉丝亲密度（双向互动亲密度权重高，单向互动亲密度主动发起的次数计入亲密度的权重中等，单向互动亲密度被动次数计入亲密度的权重低） 
	内容质量-原创性；营销号（多转发原创少质量不高，降权）
（3）微博信息推送：基于PersonalRank对指定用户潜在感兴趣的item做推送，找主要感兴趣的item